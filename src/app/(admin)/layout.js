"use client";
import { useEffect, useState } from "react";
import { SessionProvider } from "next-auth/react";
import { ThemeProvider } from "next-themes";
import "../globals.css";
import { Users, UserCheck, UserX } from "lucide-react";
import { AppSidebar } from "../../components/app-sidebar";
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "../../components/ui/breadcrumb";
import { Separator } from "../../components/ui/separator";
import {
  SidebarInset,
  SidebarProvider,
  SidebarTrigger,
} from "../../components/ui/sidebar";
import TogleDarkMode from "../../components/TogleDarkMode";
const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  const [theme, setTheme] = useState(null); // Initially no theme
  const [isClient, setIsClient] = useState(false); // Track if the client has mounted

  // This effect runs only on the client, after the initial render
  useEffect(() => {
    setIsClient(true); // Set to true once client is mounted

    document.body.setAttribute("cz-shortcut-listen", "true");
    // Only run on the client side
    const savedTheme = localStorage.getItem("theme");
    if (savedTheme) {
      setTheme(savedTheme);
    } else {
      setTheme("light"); // Default theme if none is saved
    }

    // Add a cz-shortcut-listen attribute for some custom handling (if needed)
    document.body.setAttribute("cz-shortcut-listen", "true");
  }, []);

  // Apply theme after client-side mount
  useEffect(() => {
    if (isClient && theme) {
      document.body.classList.remove("light", "dark"); // Remove existing theme classes
      document.body.classList.add(theme); // Add the new theme
      localStorage.setItem("theme", theme); // Save theme preference to localStorage
    }
  }, [isClient, theme]); // Only run when client has mounted and theme is set

  return (
    <SessionProvider>
      <ThemeProvider attribute="class" defaultTheme="system" enableSystem>
        <html lang="en">
          <body>
            <SidebarProvider>
              <AppSidebar />
              <SidebarInset>
                <header className="flex h-16 shrink-0 items-center justify-between  gap-2 transition-[width,height] ease-linear group-has-[[data-collapsible=icon]]/sidebar-wrapper:h-12">
                  <div className="flex items-center gap-2 px-4">
                    <SidebarTrigger className="-ml-1" />
                    <Separator orientation="vertical" className="mr-2 h-4" />
                    <Breadcrumb>
                      <BreadcrumbList>
                        <BreadcrumbItem className="hidden md:block">
                          <BreadcrumbLink href="/dashboard">
                            dashboard
                          </BreadcrumbLink>
                        </BreadcrumbItem>
                        <BreadcrumbSeparator className="hidden md:block" />
                        <BreadcrumbItem>
                          <BreadcrumbPage>Data Fetching</BreadcrumbPage>
                        </BreadcrumbItem>
                      </BreadcrumbList>
                    </Breadcrumb>
                  </div>
                  <div className="mr-8">
                    <TogleDarkMode />
                  </div>
                </header>

                <div>{children}</div>
              </SidebarInset>
            </SidebarProvider>
          </body>
        </html>
      </ThemeProvider>
    </SessionProvider>
  );
}
